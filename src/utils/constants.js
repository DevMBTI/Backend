const pathDescriptions = {
  frontend: {
    title: '프론트엔드 개발자',
    subtitle: '사용자 경험을 중시하는 개발자 유형',
    description: '프론트엔드 개발자는 사용자가 직접 보고 상호작용하는 웹사이트, 앱의 인터페이스를 구현합니다. HTML, CSS, JavaScript에 능숙하며, 최신 프레임워크(React, Vue, Angular 등)를 활용해 반응형 웹을 구축합니다.',
    strengths: [
      '시각적 디자인 감각이 뛰어남',
      '사용자 경험(UX)에 대한 이해도가 높음',
      '세부 사항에 대한 관심이 많음',
      '즉각적인 피드백을 통한 개발을 선호'
    ],
    recommendedFields: [
      '웹 프론트엔드 개발자',
      'UI/UX 개발자',
      '모바일 앱 개발자',
      '웹 디자이너'
    ],
    learningPath: 'HTML, CSS, JavaScript 기본기를 다진 후 React나 Vue.js 같은 프레임워크를 학습하세요. 이후 상태 관리, 반응형 디자인, 웹 접근성에 대해 깊이 있게 공부하면 좋습니다.'
  },
  backend: {
    title: '백엔드 개발자',
    subtitle: '시스템의 안정성을 중시하는 개발자 유형',
    description: '백엔드 개발자는 사용자에게 보이지 않는 서버 측 로직을 개발합니다. 데이터베이스 설계, API 개발, 서버 관리 등을 담당하며 시스템의 성능과 안정성을 책임집니다.',
    strengths: [
      '논리적 사고와 문제 해결 능력이 뛰어남',
      '시스템 아키텍처에 대한 이해도가 높음',
      '데이터 구조와 알고리즘에 강점',
      '성능 최적화에 관심이 많음'
    ],
    recommendedFields: [
      '백엔드 개발자',
      'API 개발자',
      '데이터베이스 관리자',
      '클라우드 서비스 개발자'
    ],
    learningPath: 'Python, Java, Node.js 등의 서버 언어를 배우고, 데이터베이스와 API 디자인 원칙을 학습하세요. 이후 클라우드 서비스(AWS, Azure)와 DevOps 도구를 익히면 더욱 경쟁력이 생깁니다.'
  },
  fullstack: {
    title: '풀스택 개발자',
    subtitle: '다재다능한 통합형 개발자 유형',
    description: '풀스택 개발자는 프론트엔드와 백엔드 모두에서 작업할 수 있는 개발자입니다. 웹 애플리케이션의 전체 개발 과정을 이해하고 구현할 수 있어 작은 팀이나 스타트업에서 특히 가치가 높습니다.',
    strengths: [
      '폭넓은 기술 지식과 적응력',
      '전체 시스템 흐름에 대한 이해',
      '다양한 기술 스택 간 전환 능력',
      '독립적으로 프로젝트를 완성할 수 있는 능력'
    ],
    recommendedFields: [
      '풀스택 웹 개발자',
      '소규모 팀 개발자',
      '스타트업 기술 책임자',
      '프리랜서 개발자'
    ],
    learningPath: '프론트엔드(HTML, CSS, JavaScript, React)와 백엔드(Node.js, Express, 데이터베이스) 기술을 균형 있게 학습하세요. 추가로 배포와 CI/CD 파이프라인 구축 방법도 알아두면 좋습니다.'
  },
  data: {
    title: '데이터 전문가',
    subtitle: '데이터 기반 의사결정을 지원하는 개발자 유형',
    description: '데이터 전문가는 데이터를 수집, 분석하고 이를 통해 인사이트를 도출합니다. 머신러닝과 통계를 활용해 예측 모델을 개발하고, 데이터 시각화를 통해 복잡한 정보를 이해하기 쉽게 전달합니다.',
    strengths: [
      '수학적 사고와 통계적 분석 능력',
      '패턴 인식과 데이터 해석 능력',
      '복잡한 문제를 단순화하는 능력',
      '데이터 기반 의사결정'
    ],
    recommendedFields: [
      '데이터 사이언티스트',
      '데이터 엔지니어',
      '머신러닝 엔지니어',
      'BI(Business Intelligence) 개발자'
    ],
    learningPath: 'Python과 R을 배우고, 통계학과 데이터 시각화 도구를 학습하세요. SQL과 NoSQL 데이터베이스에 대한 이해도 필요합니다. 이후 머신러닝과 딥러닝 프레임워크(TensorFlow, PyTorch)를 익히면 좋습니다.'
  },
  devops: {
    title: 'DevOps 엔지니어',
    subtitle: '개발과 운영을 통합하는 개발자 유형',
    description: 'DevOps 엔지니어는 개발과 IT 운영 사이의 간극을 메우는 역할을 합니다. 자동화된 배포 파이프라인을 구축하고, 모니터링 시스템을 설정하며, 인프라를 코드로 관리합니다.',
    strengths: [
      '자동화와 효율성에 대한 관심',
      '시스템 안정성과 확장성에 대한 이해',
      '문제 해결과 트러블슈팅 능력',
      '지속적 통합/배포(CI/CD) 프로세스에 대한 이해'
    ],
    recommendedFields: [
      'DevOps 엔지니어',
      'SRE(Site Reliability Engineer)',
      '클라우드 인프라 엔지니어',
      '플랫폼 엔지니어'
    ],
    learningPath: '리눅스 시스템 관리와 쉘 스크립팅을 배우고, Docker와 Kubernetes로 컨테이너화를 학습하세요. CI/CD 도구(Jenkins, GitHub Actions)와 클라우드 서비스(AWS, Azure, GCP) 활용법을 익히면 경쟁력이 생깁니다.'
  },
  mobile: {
    title: '모바일 앱 개발자',
    subtitle: '사용자 모바일 경험에 집중하는 개발자 유형',
    description: '모바일 앱 개발자는 iOS, Android 또는 크로스 플랫폼 기술을 사용하여 모바일 애플리케이션을 개발합니다. 터치 기반 인터페이스, 제한된 화면 공간, 오프라인 사용 등 모바일 환경의 특성을 이해하고 최적화된 앱을 만듭니다.',
    strengths: [
      '모바일 UI/UX에 대한 이해도가 높음',
      '제한된 리소스에서 최적화 능력이 뛰어남',
      '사용자 친화적인 인터페이스 설계 능력',
      '다양한 기기와 OS 버전에 대한 대응력'
    ],
    recommendedFields: [
      'iOS 개발자',
      'Android 개발자',
      'React Native 개발자',
      'Flutter 개발자'
    ],
    learningPath: 'iOS 개발을 위한 Swift, Android 개발을 위한 Kotlin을 배우거나, React Native나 Flutter와 같은 크로스 플랫폼 프레임워크를 학습하세요. 모바일 UI/UX 원칙과 네이티브 API 활용 방법도 중요합니다.'
  },
  security: {
    title: '보안 엔지니어',
    subtitle: '시스템과 데이터 보호에 전문화된 개발자 유형',
    description: '보안 엔지니어는 시스템과 애플리케이션의 취약점을 분석하고 보호 대책을 설계합니다. 침투 테스트, 보안 코드 리뷰, 인증 및 암호화 시스템 구현 등을 통해 데이터와 시스템을 안전하게 보호합니다.',
    strengths: [
      '위협 모델링과 리스크 분석 능력',
      '체계적이고 세밀한 문제 해결 접근법',
      '최신 보안 동향에 대한 지속적인 학습 의지',
      '윤리적 해킹과 방어적 사고'
    ],
    recommendedFields: [
      '애플리케이션 보안 엔지니어',
      '보안 감사 전문가',
      '침투 테스트 전문가',
      '암호화 전문가'
    ],
    learningPath: '네트워크와 시스템 기초를 배운 후, 웹 및 애플리케이션 보안, 암호화 이론, 취약점 분석 기법을 학습하세요. 추가로 윤리적 해킹과 침투 테스트 도구 활용법을 익히면 좋습니다.'
  },
  gamedev: {
    title: '게임 개발자',
    subtitle: '인터랙티브 경험을 창조하는 개발자 유형',
    description: '게임 개발자는 엔진과 프로그래밍 기술을 활용하여 인터랙티브한 게임 경험을 만듭니다. 그래픽스, 물리 엔진, 게임 로직, AI 등 다양한 분야의 지식을 통합하여 사용자에게 몰입감 있는 경험을 제공합니다.',
    strengths: [
      '창의적 문제 해결과 시각적 사고',
      '수학과 물리에 대한 이해',
      '성능 최적화와 효율적인 리소스 관리 능력',
      '협업과 다학제적 커뮤니케이션 능력'
    ],
    recommendedFields: [
      '게임 클라이언트 프로그래머',
      '게임 서버 프로그래머',
      '게임 엔진 개발자',
      '게임 AI 프로그래머'
    ],
    learningPath: 'C++ 또는 C#을 배우고, Unity나 Unreal Engine과 같은 게임 엔진을 학습하세요. 3D 수학, 물리, 그래픽스 프로그래밍에 대한 이해도 중요합니다. 게임 디자인 원칙을 이해하면 더 좋은 게임을 만들 수 있습니다.'
  },
  embedded: {
    title: '임베디드 시스템 개발자',
    subtitle: '하드웨어와 소프트웨어의 경계에서 일하는 개발자 유형',
    description: '임베디드 시스템 개발자는 특정 기능을 수행하도록 설계된 하드웨어에 내장되는 소프트웨어를 개발합니다. 제한된 자원을 최대한 활용하여 효율적이고 안정적인 시스템을 구축합니다.',
    strengths: [
      '하드웨어와 소프트웨어 간 상호작용에 대한 이해',
      '저수준 최적화와 효율적인 코드 작성 능력',
      '제한된 리소스 환경에서의 문제 해결 능력',
      '디버깅과 시스템 분석 능력'
    ],
    recommendedFields: [
      '임베디드 소프트웨어 엔지니어',
      'IoT 장치 프로그래머',
      '펌웨어 개발자',
      'RTOS 개발자'
    ],
    learningPath: 'C/C++와 같은 저수준 언어를 배우고, 마이크로컨트롤러 프로그래밍과 디지털 회로 기초를 학습하세요. RTOS와 전력 관리, 메모리 최적화 기법에 대한 이해도 중요합니다.'
  },
  ai: {
    title: 'AI/ML 엔지니어',
    subtitle: '기계 학습과 인공지능을 개발하는 개발자 유형',
    description: 'AI/ML 엔지니어는 컴퓨터가 데이터로부터 학습하고 추론할 수 있는 알고리즘과 모델을 개발합니다. 복잡한 문제를 해결하기 위해 머신러닝, 딥러닝, 자연어 처리 등의 기술을 활용합니다.',
    strengths: [
      '수학적 직관과 통계적 분석 능력',
      '대규모 데이터 처리와 모델 최적화 능력',
      '추상적 문제의 알고리즘적 해결 능력',
      '실험적 접근과 지속적인 모델 개선 능력'
    ],
    recommendedFields: [
      '머신러닝 엔지니어',
      '딥러닝 연구원',
      'NLP 엔지니어',
      'AI 모델 최적화 전문가'
    ],
    learningPath: 'Python과 수학(선형대수, 미적분, 통계)을 기초로, 머신러닝 알고리즘과 딥러닝 프레임워크(TensorFlow, PyTorch)를 학습하세요. 데이터 전처리와 특성 엔지니어링, 모델 평가 방법론도 중요합니다.'
  }
};

const aiGeneratedQuestions = {
  frontend: {
    question: "다음 중 웹 페이지의 반응형 디자인을 구현하는 데 가장 적합한 CSS 기술은 무엇인가요?",
    options: [
      "미디어 쿼리 (Media Queries)",
      "애니메이션 (Animations)",
      "CSS 필터 (Filters)",
      "CSS 변수 (Variables)"
    ],
    answer: 0,
    explanation: "미디어 쿼리는 화면 크기, 해상도 등 다양한 조건에 따라 스타일을 적용할 수 있어 반응형 디자인의 핵심 기술입니다."
  },
  backend: {
    question: "서버에서 데이터를 안전하게 저장하기 위한 가장 기본적인 방법은 무엇인가요?",
    options: [
      "모든 데이터를 평문으로 저장하기",
      "민감한 정보 암호화하기",
      "데이터를 항상 메모리에만 보관하기",
      "모든 데이터는 클라이언트에만 저장하기"
    ],
    answer: 1,
    explanation: "민감한 정보는 암호화하여 저장해야 데이터 유출 시에도 정보를 보호할 수 있습니다."
  },
  fullstack: {
    question: "풀스택 개발에서 가장 중요한 고려사항은 무엇인가요?",
    options: [
      "최신 프론트엔드 프레임워크 사용하기",
      "가장 빠른 백엔드 언어 선택하기",
      "프론트엔드와 백엔드 간의 효율적인 통신 설계",
      "모든 코드를 한 사람이 직접 작성하기"
    ],
    answer: 2,
    explanation: "풀스택 개발에서는 프론트엔드와 백엔드 사이의 효율적인 통신 설계가 가장 중요합니다. 이는 성능과 사용자 경험에 직접적인 영향을 미칩니다."
  },
  data: {
    question: "대용량 데이터를 분석할 때 가장 먼저 해야 할 단계는 무엇인가요?",
    options: [
      "즉시 머신러닝 모델 적용하기",
      "데이터 시각화로 인사이트 찾기",
      "데이터 전처리 및 품질 확인하기",
      "복잡한 통계 분석 실행하기"
    ],
    answer: 2,
    explanation: "데이터 분석에서 가장 중요한 첫 단계는 데이터 전처리와 품질 확인입니다. 이 과정 없이는 후속 분석이 부정확할 수 있습니다."
  },
  devops: {
    question: "CI/CD 파이프라인 구축의 주요 목적은 무엇인가요?",
    options: [
      "모든 개발을 한 명의 개발자가 담당하기 위해",
      "배포 프로세스 자동화로 오류 감소 및 생산성 향상",
      "고객의 요구사항을 더 잘 이해하기 위해",
      "서버 비용을 절감하기 위해"
    ],
    answer: 1,
    explanation: "CI/CD 파이프라인의 주요 목적은 배포 프로세스를 자동화하여 인적 오류를 줄이고 개발 생산성을 높이는 것입니다."
  },
  mobile: {
    question: "네이티브 앱과 하이브리드 앱의 주요 차이점은 무엇인가요?",
    options: [
      "네이티브 앱은 특정 플랫폼에 최적화되어 있고, 하이브리드 앱은 여러 플랫폼에서 작동함",
      "네이티브 앱은 항상 오프라인에서 작동하고, 하이브리드 앱은 온라인에서만 작동함",
      "네이티브 앱은 무료이고, 하이브리드 앱은 유료임",
      "네이티브 앱은 작은 화면에서만 작동하고, 하이브리드 앱은 큰 화면에서만 작동함"
    ],
    answer: 0,
    explanation: "네이티브 앱은 특정 플랫폼(iOS, Android)에 최적화되어 개발되는 반면, 하이브리드 앱은 웹 기술로 개발되어 여러 플랫폼에서 실행될 수 있도록 설계됩니다."
  },
  security: {
    question: "웹 애플리케이션에서 가장 흔한 보안 취약점은 무엇인가요?",
    options: [
      "물리적 서버 접근",
      "SQL 인젝션",
      "전력 공급 중단",
      "너무 많은 사용자"
    ],
    answer: 1,
    explanation: "SQL 인젝션은 OWASP Top 10에서 계속 상위에 랭크되는 웹 애플리케이션의 가장 흔한 보안 취약점 중 하나입니다."
  },
  gamedev: {
    question: "게임 개발에서 '프레임 레이트'가 중요한 이유는 무엇인가요?",
    options: [
      "화면 해상도를 결정하기 때문",
      "게임의 스토리 진행 속도를 결정하기 때문",
      "게임 플레이의 부드러움과 반응성에 영향을 미치기 때문",
      "게임의 가격을 결정하는 요소이기 때문"
    ],
    answer: 2,
    explanation: "프레임 레이트는 초당 화면에 표시되는 이미지(프레임)의 수로, 게임의 부드러움과 반응성에 직접적인 영향을 미치는 중요한 성능 지표입니다."
  },
  embedded: {
    question: "임베디드 시스템 개발에서 가장 중요한 고려사항은 무엇인가요?",
    options: [
      "시스템의 외관 디자인",
      "자원 제약(메모리, 전력 등)에 대한 최적화",
      "최신 프로그래밍 언어 사용",
      "대용량 데이터 처리 기능"
    ],
    answer: 1,
    explanation: "임베디드 시스템은 일반적으로 제한된 메모리, 처리 능력, 전력을 가지고 있기 때문에 이러한 제약 조건 내에서 최적화하는 것이 가장 중요합니다."
  },
  ai: {
    question: "머신 러닝 모델에서 과적합(Overfitting)을 방지하는 가장 좋은 방법은 무엇인가요?",
    options: [
      "더 많은 매개변수 추가하기",
      "더 복잡한 모델 사용하기",
      "정규화 기법 적용하기",
      "모든 데이터를 훈련 세트로 사용하기"
    ],
    answer: 2,
    explanation: "정규화(Regularization)는 모델이 훈련 데이터에 과도하게 적합되는 것을 방지하는 기법으로, 모델의 일반화 능력을 향상시킵니다."
  }
};

module.exports = {
  pathDescriptions,
  aiGeneratedQuestions
};
